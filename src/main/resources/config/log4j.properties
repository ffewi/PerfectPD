#定义LOG输出级别
log4j.rootLogger=INFO,Console,File
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%l %5p : %d{yyyy-MM-dd HH:mm:ss}] - %m%n
#	%m   输出代码中指定的消息
#　　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数 
#　　%c   输出所属的类目，通常就是所在类的全名 
#　　%t   输出产生该日志事件的线程名 
#　　%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )
#文件大小到达指定尺寸的时候产生一个新的文件
#log4j.appender.File = org.apache.log4j.RollingFileAppender
log4j.appender.File = org.apache.log4j.DailyRollingFileAppender
#指定输出目录
log4j.appender.File.File = D:/MyWorkspace/PerfectPD/src/main/resources/logs/ssm.log
#追加 是否覆盖 true不覆盖 false 覆盖
log4j.appender.File.Append = false
# DailyRollingFileAppender 这里面才有DatePattern属性  但是没有MaxFileSize 注意对应使用
# RollingFileAppender 没有DatePattern  但是有 MaxFileSize 属性
# 下面是每分钟新建一个log文件


log4j.appender.File.DatePattern = '.'yyyy-MM-dd

#DatePattern=’.’yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分，即对应的格式如下：
#
#’.’yyyy-MM: 每月
#’.’yyyy-ww: 每周
#’.’yyyy-MM-dd: 每天
#’.’yyyy-MM-dd-a: 每天两次
#’.’yyyy-MM-dd-HH: 每小时
#’.’yyyy-MM-dd-HH-mm: 每分钟

#定义文件最大大小
#log4j.appender.File.MaxFileSize = 2kb

# 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold = ALL
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n